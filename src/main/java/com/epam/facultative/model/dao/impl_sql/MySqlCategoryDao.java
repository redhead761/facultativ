package com.epam.facultative.model.dao.impl_sql;

import com.epam.facultative.model.dao.CategoryDao;
import com.epam.facultative.model.entities.Category;
import com.epam.facultative.model.exception.DAOException;
import com.epam.facultative.model.exception.ValidateException;
import lombok.RequiredArgsConstructor;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static com.epam.facultative.model.dao.impl_sql.сonstants.FieldsConstants.*;
import static com.epam.facultative.model.dao.impl_sql.сonstants.SQLRequestConstants.*;
import static com.epam.facultative.model.exception.ConstantsValidateMessage.CAN_NOT_DELETE_CATEGORY_MESSAGE;
import static com.epam.facultative.model.exception.ConstantsValidateMessage.TITLE_NOT_UNIQUE_MESSAGE;

/**
 * Category DAO class for My SQL database. Matches table "category" in database.
 *
 * @author Oleksandr Pacnhenko
 * @version 1.0
 */
@RequiredArgsConstructor
public class MySqlCategoryDao implements CategoryDao {
    private final DataSource dataSource;

    /**
     * Obtains instance of Category from database by parameter
     *
     * @param param -  parameter value
     * @return Optional.ofNullable - category is null if the category is not found.
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public Optional<Category> get(String param) throws DAOException {
        Category category = null;
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(String.format(SELECT_CATEGORY, param))) {
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                category = mapRow(rs);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        return Optional.ofNullable(category);
    }

    /**
     * Inserts new category to database
     *
     * @param category - id will be generated by database. Title should be not null
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void add(Category category) throws DAOException, ValidateException {
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(INSERT_CATEGORY)) {
            setStatementFields(category, stmt);
            stmt.executeUpdate();
        } catch (SQLIntegrityConstraintViolationException e) {
            throw new ValidateException(TITLE_NOT_UNIQUE_MESSAGE);
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }

    /**
     * Updates a category in the database
     *
     * @param category should contain fields to be updated. Title should be not null.
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void update(Category category) throws DAOException, ValidateException {
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(UPDATE_CATEGORY)) {
            stmt.setString(setStatementFields(category, stmt), String.valueOf(category.getId()));
            stmt.executeUpdate();
        } catch (SQLIntegrityConstraintViolationException e) {
            throw new ValidateException(TITLE_NOT_UNIQUE_MESSAGE);
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }

    /**
     * Deletes category record in database
     *
     * @param id - value of id field in database
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public void delete(int id) throws DAOException, ValidateException {
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(DELETE_CATEGORY)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        } catch (SQLIntegrityConstraintViolationException e) {
            throw new ValidateException(CAN_NOT_DELETE_CATEGORY_MESSAGE);
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }

    /**
     * Obtains list of all categories from database by parameter
     *
     * @param param -  parameter value
     * @return categories list
     * @throws DAOException is wrapper for SQLException
     */
    @Override
    public Map.Entry<Integer, List<Category>> getAll(String param) throws DAOException {
        List<Category> categories = new ArrayList<>();
        int noOfRecords = 0;
        try (Connection con = dataSource.getConnection();
             PreparedStatement stmt = con.prepareStatement(String.format(SELECT_ALL_CATEGORIES, param))) {
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    categories.add(mapRow(rs));
                }
            }
            ResultSet rs = stmt.executeQuery(SELECT_FOUND_ROWS);
            if (rs.next()) {
                noOfRecords = rs.getInt(1);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        return Map.entry(noOfRecords, categories);
    }

    /**
     * Private methods for class maintenance
     */
    private Category mapRow(ResultSet rs) throws SQLException {
        return Category.builder()
                .id(rs.getInt(CATEGORY_ID))
                .title(rs.getString(CATEGORY_TITLE))
                .description(rs.getString(CATEGORY_DESCRIPTION))
                .build();
    }

    private int setStatementFields(Category category, PreparedStatement stmt) throws SQLException {
        int k = 0;
        stmt.setString(++k, category.getTitle());
        stmt.setString(++k, category.getDescription());
        return ++k;
    }
}
